context.modules = [
    #{   name = <module-name>
    #    [ args = { <key> = <value> ... } ]
    #    [ flags = [ [ ifexists ] [ nofail ] ]
    #}
    #
    # Loads a module with the given parameters.
    # If ifexists is given, the module is ignored when it is not found.
    # If nofail is given, module initialization failures are ignored.
    #

    # The native communication protocol.
    {   name = libpipewire-module-protocol-native }

    {   name = libpipewire-module-client-node }

    # Makes a factory for wrapping nodes in an adapter with a
    # converter and resampler.

    {   name = libpipewire-module-adapter }

    {   name = libpipewire-module-loopback }
]

context.objects = [
    {   factory = adapter
        args = {
            #node.description = "my-sink"
            #node.name = "my_sink"
            capture.props = {
                #node.description = "my-sink"
                #node.name = my_sink
                media.class = Audio/Sink
                audio.position = [ FL FR ]
                #audio.channels = 2
                node.target = "alsa_input.pci-0000_00_1f.3.analog-stereo"
            }
            playback.props = {
                #node.name = my_sink
                #node.description = "my-sink"
                #media.class = Audio/Sink
                #node.latency = 1024/48000
                #audio.rate = 44100
                #audio.channels = 2
                audio.position = [ FL FR ]
                node.target = "alsa_input.pci-0000_00_1f.3.analog-stereo"
                #node.target = "my-default-sink"
            }
        }
    }
]
